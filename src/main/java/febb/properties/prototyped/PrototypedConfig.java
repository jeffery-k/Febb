package febb.properties.prototyped;import febb.properties.json.Node;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;//TODO: Initiate prototypes in implementing constructors//TODO: Add null-checks to all node accepting constructorspublic abstract class PrototypedConfig {    private String PROTOTYPE_KEY = "prototype";    private String PROTOTYPE_NAMES_KEY = "prototypes";    private String PROPERTIES_KEY = "properties";    private boolean prototype;    private List<String> prototypes;    private Map<String, Node> properties;    protected Node config;    public PrototypedConfig() {}    public PrototypedConfig(Node config) {        this.config = config;        this.prototypes = new ArrayList<String>();        this.prototype = config.get(PROTOTYPE_KEY).getBooleanValue();        Node prototypesNode = config.get(PROTOTYPE_NAMES_KEY);        for (int i = 0; i < prototypesNode.size(); i++) {            prototypes.add(prototypesNode.get(i).getStringValue());        }        this.properties = new HashMap<String, Node>();        Node propertiesNode = config.get(PROPERTIES_KEY);        for (String propertyKey : propertiesNode.getKeys()) {            properties.put(propertyKey, propertiesNode.get(propertyKey));        }    }    public abstract void init();    protected void loadProperties() {        //TODO:... this    }    public boolean isPrototype() {        return prototype;    }    public Map<String, Node> getProperties() {        return properties;    }    public List<String> getPrototypes() {        return prototypes;    }    public void implement(PrototypedConfig prototype) {        implement(prototype.config);    }    public void implement(Node prototype) {        //TODO    }}